<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jihai.bitfree.dao.UserDAO">

    <resultMap id="userResultMap" type="com.jihai.bitfree.entity.UserDO">
        <result column="id" property="id" />
        <result column="name" property="name" />
        <result column="avatar" property="avatar" />
        <result column="position" property="position" />
        <result column="city" property="city" />
        <result column="coins" property="coins" />
        <result column="level" property="level" />
        <result column="seniority" property="seniority" />
        <result column="token" property="token" />
        <result column="status" property="status" />
        <result column="email" property="email" />
        <result column="github" property="github" />
        <result column="password" property="password" />
        <result column="contact" property="contact" />
        <result column="ip" property="ip" />
        <result column="remark" property="remark" />
        <result column="deleted" property="deleted" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>


    <sql id="BASE_COLUMN">id, name, avatar, position, level, city, coins, seniority, token, status, email, github, ip, invite_user_id, password, contact, remark, deleted, create_time, update_time</sql>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO user(`avatar`,`name`, `email`, `password`, `level`)
        VALUE(#{avatar},#{name}, #{email}, #{password}, #{level})
    </insert>

    <select id="queryByEmailAndPassword" resultMap="userResultMap">
        SELECT * FROM user WHERE email = #{email} AND password = #{password} AND deleted = 0
    </select>

    <select id="getById" resultMap="userResultMap">
        SELECT <include refid="BASE_COLUMN"/> FROM user WHERE id = #{id} AND deleted = 0
    </select>

    <update id="saveToken">
        UPDATE user SET token = #{token},ip = #{ip} WHERE email = #{email} AND password = #{password} AND deleted = 0
    </update>

    <update id="clearToken">
        UPDATE user SET token = '' WHERE id = #{id} AND deleted = 0
    </update>
    <update id="save">
        UPDATE user SET
        name = #{name},
        avatar = #{avatar},
        position = #{position},
        seniority = #{seniority},
        city = #{city},
        github = #{github}
        <if test="inviteUserId != null">
            ,invite_user_id = #{inviteUserId}
        </if>
        WHERE id = #{userId}
        AND deleted = 0
    </update>
    <update id="updatePasswordAndClearToken">
        UPDATE user
        SET password = #{password}, token = null
        WHERE id = #{id} AND deleted = 0
    </update>
    <update id="incrementCoins">
        UPDATE user
        SET coins = coins + #{coins}
        WHERE id = #{userId} AND deleted = 0 AND (coins + #{coins}) >= 0
    </update>
    <update id="updateIp">
        UPDATE user
        SET ip = #{ip}
        WHERE id = #{userId}
        AND deleted = 0
    </update>
    <update id="updateRemark">
        UPDATE user
        SET remark = #{remark}
        WHERE id = #{id}
        AND deleted = 0
    </update>

    <select id="batchQueryByIdList" resultMap="userResultMap">
        SELECT <include refid="BASE_COLUMN"/> FROM user WHERE id IN
        <foreach collection="idList" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="getByToken" resultMap="userResultMap">
        SELECT <include refid="BASE_COLUMN"/>
        FROM user WHERE token = #{token} AND deleted = 0
    </select>
    <select id="queryByEmail" resultMap="userResultMap">
        SELECT <include refid="BASE_COLUMN"/>
        FROM user WHERE email = #{email} AND deleted = 0
    </select>
    <select id="ActivityUserResp" resultType="com.jihai.bitfree.dto.resp.ActivityUserResp">
        SELECT user.id AS id, user.name AS name, user.avatar AS avatar, COUNT(*) AS count
        FROM user
        RIGHT JOIN reply
        ON user.id = reply.send_user_id
        WHERE reply.create_time > DATE_SUB(CURDATE(), interval 1 day)
        AND user.deleted = 0
        AND reply.deleted = 0
        GROUP BY reply.send_user_id
        ORDER BY COUNT(*) DESC LIMIT 10
    </select>
    <select id="listAllUserId" resultType="long">
        SELECT id
        FROM user
        WHERE deleted = 0
    </select>
    <select id="getByEmail" resultType="com.jihai.bitfree.entity.UserDO">
        SELECT <include refid="BASE_COLUMN" />
        FROM user
        WHERE email = #{email}
        AND deleted = 0
    </select>
    <select id="getRanksByCoins" resultType="com.jihai.bitfree.entity.UserDO">
        SELECT <include refid="BASE_COLUMN"/>
        FROM user
        WHERE deleted = 0
        ORDER BY coins DESC
        LIMIT 10
    </select>
    <select id="getUserRank" resultType="java.lang.Integer">
        SELECT COUNT(*) + 1
        FROM user a
        WHERE a.coins > (SELECT coins FROM user WHERE id = #{userId} AND deleted = 0) AND a.deleted = 0
    </select>

    <select id="countByName" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM user
        WHERE name = #{name}
    </select>
    <select id="searchUser" resultType="com.jihai.bitfree.entity.UserDO">
        SELECT <include refid="BASE_COLUMN" />
        FROM user
        WHERE name LIKE #{name}
        AND deleted = 0
    </select>
</mapper>
